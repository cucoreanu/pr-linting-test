name: "Validate PR title"

on:
  pull_request_target:
    types:
      - opened
      - edited
      - synchronize
      - reopened
      - labeled
      - unlabeled

permissions:
  pull-requests: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Test for ignored patterns
        id: title-check
        uses: actions/github-script@v6
        with:
          script: |
            const title = context.payload.pull_request.title;
            const ignoredPatterns = [/^revert\b/, /^bump\b/, /^!\b/];

            // Check if title matches any ignored pattern
            const skipSemanticCheck = ignoredPatterns.some(pattern => pattern.test(title.toLowerCase()));

            core.setOutput("skip", skipSemanticCheck);

      - name: Set PR status to skip semantic check if matched
        if: steps.title-check.outputs.skip == 'true'
        run: |
          echo "Skipping semantic check for the current PR"

      - name: Run Semantic Pull Request check
        if: steps.title-check.outputs.skip != 'true'  # Only run if title doesn't match ignored patterns
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which scopes are allowed (newline-delimited).
          # These are regex patterns auto-wrapped in `^ $`.
          scopes: |
            LH-\d+
            lh-\d+

          # Configure that a scope must always be provided.
          requireScope: true

          # Configure which scopes are disallowed in PR titles (newline-delimited).
          # For instance, by setting the value below, `chore(release): ...` (lowercase)
          # and `ci(e2e,release): ...` (unknown scope) will be rejected.
          # These are regex patterns auto-wrapped in `^ $`.
          #disallowScopes: |
          #  release
          #  [A-Z]+

          # Configure additional validation for the subject based on a regex.
          # This example ensures the subject doesn't start with an uppercase character.
          #subjectPattern: ^(?![A-Z]).+$
          # If `subjectPattern` is configured, you can use this property to override
          # the default error message that is shown when the pattern doesn't match.
          # The variables `subject` and `title` can be used within the message.
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

          # The GitHub base URL will be automatically set to the correct value from the GitHub context variable.
          # If you want to override this, you can do so here (not recommended).
          #githubBaseUrl: https://github.myorg.com/api/v3

          # If the PR contains one of these newline-delimited labels, the
          # validation is skipped. If you want to rerun the validation when
          # labels change, you might want to use the `labeled` and `unlabeled`
          # event triggers in your workflow.
          ignoreLabels: |
            bot
            ignore-semantic-pull-request
            dependencies

          # If you're using a format for the PR title that differs from the traditional Conventional
          # Commits spec, you can use these options to customize the parsing of the type, scope and
          # subject. The `headerPattern` should contain a regex where the capturing groups in parentheses
          # correspond to the parts listed in `headerPatternCorrespondence`.
          # See: https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#headerpattern
          #headerPattern: '^(\w*)(?:\(([\w$.\-*/ ]*)\))?: (.*)$'
          #headerPatternCorrespondence: type, scope, subject
